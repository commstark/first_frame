export declare const postSchema: import("valibot").ObjectSchema<{
    readonly buttonIndex: import("valibot").NumberSchema<number>;
    readonly castId: import("valibot").OptionalSchema<import("valibot").ObjectSchema<{
        fid: import("valibot").NumberSchema<number>;
        hash: import("valibot").StringSchema<string>;
    }, undefined, {
        hash: string;
        fid: number;
    }>, {
        fid: number;
        hash: string;
    }, {
        hash: string;
        fid: number;
    }>;
    readonly fid: import("valibot").NumberSchema<number>;
    readonly fromAddress: import("valibot").UnionSchema<(import("valibot").StringSchema<string> | import("valibot").UndefinedSchema<undefined>)[], string | undefined>;
    readonly inputText: import("valibot").UnionSchema<(import("valibot").StringSchema<string> | import("valibot").UndefinedSchema<undefined>)[], string | undefined>;
    readonly state: import("valibot").UnionSchema<(import("valibot").StringSchema<string> | import("valibot").UndefinedSchema<undefined>)[], string | undefined>;
    readonly transactionId: import("valibot").UnionSchema<(import("valibot").StringSchema<string> | import("valibot").UndefinedSchema<undefined>)[], string | undefined>;
    readonly sourceFrameId: import("valibot").StringSchema<string>;
}, undefined, {
    readonly buttonIndex: number;
    readonly transactionId: string | undefined;
    readonly castId: {
        hash: string;
        fid: number;
    };
    readonly fid: number;
    readonly inputText: string | undefined;
    readonly state: string | undefined;
    readonly fromAddress: string | undefined;
    readonly sourceFrameId: string;
}>;
//# sourceMappingURL=schemas.d.ts.map