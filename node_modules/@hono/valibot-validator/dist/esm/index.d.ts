import type { Context, MiddlewareHandler, Env, ValidationTargets, Input as HonoInput } from 'hono';
import type { BaseSchema, BaseSchemaAsync, Input, Output, SafeParseResult } from 'valibot';
type Hook<T extends BaseSchema | BaseSchemaAsync, E extends Env, P extends string> = (result: SafeParseResult<T>, c: Context<E, P>) => Response | Promise<Response> | void | Promise<Response | void>;
type HasUndefined<T> = undefined extends T ? true : false;
export declare const vValidator: <T extends BaseSchema | BaseSchemaAsync, Target extends keyof ValidationTargets, E extends Env, P extends string, In = Input<T>, Out = Output<T>, I extends HonoInput = {
    in: HasUndefined<In> extends true ? { [K in Target]?: (K extends "json" ? In : HasUndefined<keyof ValidationTargets[K]> extends true ? { [K2 in keyof In]?: ValidationTargets[K][K2] | undefined; } : { [K2_1 in keyof In]: ValidationTargets[K][K2_1]; }) | undefined; } : { [K_1 in Target]: K_1 extends "json" ? In : HasUndefined<keyof ValidationTargets[K_1]> extends true ? { [K2_2 in keyof In]?: ValidationTargets[K_1][K2_2] | undefined; } : { [K2_3 in keyof In]: ValidationTargets[K_1][K2_3]; }; };
    out: { [K_2 in Target]: Out; };
}, V extends I = I>(target: Target, schema: T, hook?: Hook<T, E, P> | undefined) => MiddlewareHandler<E, P, V>;
export {};
